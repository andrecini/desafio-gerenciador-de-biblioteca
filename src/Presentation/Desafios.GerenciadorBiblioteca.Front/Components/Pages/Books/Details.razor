@page "/books/details/{Id:int}"
@using System.ComponentModel.DataAnnotations
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Books.Custom.Panels
@inject ISnackbar Snackbar
@inject IBookService bookService;

<PageTitle>Livros</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Detalhes do Livro</MudText>

<MudContainer Class="d-flex flex-row align-center pa-0 mt-5 mb-5 ma-0 gap-5 w-100" MaxWidth="MaxWidth.False">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-row align-start pa-0 ma-0 gap-5 w-100">
        <MudTextField T="string" Label="Título" Required="true" RequiredError="O Título do Livro é obrigatório" @bind-Value="book.Title" />

        <MudTextField T="string" Label="Autor" Required="true" RequiredError="O Autor do Livro é obrigatório" @bind-Value="book.Author" />

        <MudTextField T="string" Label="ISBN" HelperText="Digite apenas Números"
                      Validation="@(new Func<string, string>(ValidateISBN))" Required="true"
                      RequiredError="O ISBN é obrigatório!" @bind-Value="book.ISBN" />

        <MudTextField T="string" Label="Ano" HelperText="Digite apenas Números"
                      Validation="@(new Func<string, string>(ValidateYear))" Required="true"
                      RequiredError="O Ano é obrigatório!" @bind-Value="yearInput" />
    </MudForm>

    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Save" @onclick="EditLibraryAsync">Salvar</MudButton>
</MudContainer>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="h-100 mh-100 w-100 mw-100" PanelClass="pa-6 h-100 mh-100 overflow-y-auto">
    <MudTabPanel Text="Onde encontrar?" Class="h-100 w-100">
        <CustomLibrariesPanel Id="Id" />
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public int Id { get; set; }

    private Book book = new();
    private string yearInput;
    private MudForm form;
    private bool success;
    private string[] errors = [];

    protected override async Task OnInitializedAsync()
    {
        await InitializeLibraryAsync();
    }

    private async Task InitializeLibraryAsync()
    {
        book = await bookService.GetByIdAsync(Id);
        yearInput = book.Year.ToString();
    }

    private async Task EditLibraryAsync()
    {
        if (form.IsValid)
        {
            book.Year = Convert.ToInt32(yearInput);
            var dto = new BookDTO(book.Title, book.Author, book.ISBN, book.Year);
            await bookService.UpdateAsync(Id, dto);

            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add("Dados alterados com sucesso!", Severity.Success);
        }
    }

    private string ValidateISBN(string isbn)
    {
        if (string.IsNullOrEmpty(isbn))
            return "O ISBN é obrigatório";

        if (!isbn.All(char.IsDigit))
            return "O ISBN deve conter apenas números";

        if (isbn.Length != 13)
            return "O ISBN deve ter 13 dígitos";

        return null;
    }

    private string ValidateYear(string year)
    {
        if (string.IsNullOrEmpty(year))
            return "O Ano é obrigatório";

        if (!year.All(char.IsDigit))
            return "O Ano deve conter apenas números";

        var yearNumber = Convert.ToInt32(year);

        if (yearNumber > DateTime.Now.Year || yearNumber < 0)
            return "O Ano deve ser menor do que o ano atual e maior do que 0";

        return null;
    }
}
