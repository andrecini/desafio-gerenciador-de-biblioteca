@using System.ComponentModel.DataAnnotations
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Libraries.Queries.GetLibrariesByBookFiltered
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Users.Custom.Panels
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject IDialogService dialogService
@inject HttpService httpService
@inject AlertService alertService

<PageTitle>Livros</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Bibliotecas</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0" MaxWidth="MaxWidth.False">
    <MudForm Class="d-flex flex-row align-end gap-5">
        <MudTextField @bind-Value="libraryNameFilter" Immediate="true" Label="Nome da Biblioteca" Class="ma-0" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterLibsHandleAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (libraries == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="libraries" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Library, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Library, object>(x=> x.Name)" Class="w-100">Nome</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Library, object>(x=> x.CNPJ)">CNPJ</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Library, object>(x=> x.Phone)">Telefone</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd DataLabel="CNPJ">@context.CNPJ</MudTd>
            <MudTd DataLabel="Telefone">@context.Phone</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="OnPageChangedHandler" Count="@((int)Math.Ceiling((double)totalItems / size))" Selected="page" Class="pa-4" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<Library> libraries;
    private IEnumerable<Inventory> inventories;
    private string libraryNameFilter = string.Empty;

    private bool isFiltered = false;
    private int totalItems = 0;
    private int page = 1;
    private int size = 10;

    protected override async Task OnInitializedAsync()
    {
        await InitializeLibrariesAsync();
    }

    private async Task OnPageChangedHandler(int i)
    {
        page = i;

        if (!isFiltered) await InitializeLibrariesAsync();
        else await FilterLibsHandleAsync();
    }

    private async Task InitializeLibrariesAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<Library>>>($"/api/Libraries/book/{Id}?page={page}&size={size}");

        if (!result.IsSuccess)
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
        else
            libraries = result.Content.Data;
    }

    private async Task FilterLibsHandleAsync()
    {
        GetLibrariesByBookFilteredQuery body = new(page, size, Id, libraryNameFilter);
        var result = await httpService.PostAsync<GetLibrariesByBookFilteredQuery, CustomResponse<IEnumerable<Library>>>($"/api/Libraries/book/{Id}/filtered", body);

        if (!result.IsSuccess)
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
        else
            libraries = result.Content.Data;

        StateHasChanged();
    }

    private async Task ResetFormFiltersAsync()
    {
        libraryNameFilter = string.Empty;
        await FilterLibsHandleAsync();
    }
}
