@page "/books"
@using Desafios.GerenciadorBiblioteca.Domain.Models.Filters
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Books.Commands.RemoveBook
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Books.Queries.GetBooksByFilter
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Books.Custom.Dialogs
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Common
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@rendermode InteractiveServer
@inject IDialogService dialogService
@inject HttpService httpService
@inject AlertService alertService

<PageTitle>Livros</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Livros</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0 gap-5" MaxWidth="MaxWidth.False">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-row align-end pa-0 ma-0 gap-5 w-100">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success" @onclick="RegisterDialogHandleAsync">Cadastrar</MudButton>
        <MudTextField @bind-Value="filter.Title" Immediate="true" Label="Título" Class="ma-0" />
        <MudTextField @bind-Value="filter.Author" Immediate="true" Label="Autor" Class="ma-0" />
        <MudTextField @bind-Value="filter.ISBN" Immediate="true" Label="ISBN" Class="ma-0" />
        <MudTextField @bind-Value="yearFilter" Immediate="true" Label="Ano" Class="ma-0" InputType="InputType.Text" Validation="@(new Func<string, string>(ValidateDate))" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterBooksViewModelAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (books == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="books" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col />
            <col width="280" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Book, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=> x.Title)" Class="w-100">Título</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=> x.Author)">Autor</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=> x.ISBN)">ISBN</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=> x.Year)">Ano</MudTableSortLabel></MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Título">@context.Title</MudTd>
            <MudTd DataLabel="Autor">@context.Author</MudTd>
            <MudTd DataLabel="ISBN">@context.ISBN</MudTd>
            <MudTd DataLabel="Ano">@context.Year</MudTd>
            <MudTd DataLabel="Ações" Class="d-flex gap-2">
                <MudButton Href="@($"/books/details/{context.Id}")" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search">Detalhes</MudButton>
                <MudButton @onclick="@((e) => DeleteDialogHandleAsync(context.Id))" Variant="Variant.Outlined" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error">Excluir</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="OnPageChangedHandler" Count="@((int)Math.Ceiling((double)totalItems / size))" Selected="page" Class="pa-4" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<Book> books;
    private BookFilter filter = new();
    private string yearFilter;

    private MudForm form;
    private bool success;
    private string[] errors = [];

    private bool isFiltered = false;
    private int totalItems = 0;
    private int page = 1;
    private int size = 10;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeDataAsync();
            StateHasChanged();
        }
    }

    private async Task OnPageChangedHandler(int i)
    {
        page = i;

        if (!isFiltered) await InitializeDataAsync();
        else await FilterBooksViewModelAsync();
    }

    private async Task InitializeDataAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<Book>>>($"/api/Books?page={page}&size={size}");

        if (result.IsSuccess)
            books = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task FilterBooksViewModelAsync()
    {
        if (!form.IsValid)
            return;

        GetBooksByFilterQuery body = new(page, size, filter.Title, filter.Author, filter.ISBN, filter.Year);
        var result = await httpService.PostAsync<GetBooksByFilterQuery, CustomResponse<IEnumerable<Book>>>($"/api/Books/filter", body);

        if (result.IsSuccess)
            books = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
        

        StateHasChanged();
    }

    private string ValidateDate(string arg)
    {
        if (string.IsNullOrEmpty(arg))
        {
            filter.Year = 0;
        }
        else
        {
            if (!arg.All(char.IsDigit))
                return "Digite apenas números";

            var year = Convert.ToInt32(arg);

            if (year <= 0)
                return "O Ano deve ser maior do que 0";
            if (year > DateTime.Now.Year)
                return "O Ano deve ser menor do que o ano atual";

            filter.Year = year;
        }

        return null;
    }

    private async Task ResetFormFiltersAsync()
    {
        filter = new();
        yearFilter = null;
        errors = Array.Empty<string>();

        await FilterBooksViewModelAsync();
    }

    private async Task DeleteDialogHandleAsync(int id)
    {
        var parameters = new DialogParameters<CommonDeleteDialog>
        {
            { x => x.ContentText, "Tem certeza que deseja Excluir esse Livro e todos os seus registros? Essa ação não poderá ser desfeita." },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await dialogService.ShowAsync<CommonDeleteDialog>("Excluir", parameters, options);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            var result = await httpService.DeleteAsync($"/api/Books/{id}");

            if (!result.IsSuccess)
                alertService.ShowErrors(result.ErrorDetails, result.StatusCode);

            await InitializeDataAsync();
        }
    }

    private async Task RegisterDialogHandleAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await dialogService.ShowAsync<RegisterBookDialog>("Cadastrar", options);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            await InitializeDataAsync();
        }
    }
}

