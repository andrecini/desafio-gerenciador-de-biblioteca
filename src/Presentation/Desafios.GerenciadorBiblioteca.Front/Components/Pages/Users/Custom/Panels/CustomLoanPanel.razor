@using Desafios.GerenciadorBiblioteca.Domain.Enums
@using Desafios.GerenciadorBiblioteca.Domain.Models.Filters
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Loans.Queries.GetLoansDetailsFilteredByUser
@using Desafios.GerenciadorBiblioteca.Service.DTOs.ViewModels
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Common
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Libraries.Custom.Dialogs
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject IDialogService dialogService
@inject HttpService httpService
@inject AlertService alertService

<MudText Typo="Typo.h6">Livros</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0 gap-5" MaxWidth="MaxWidth.False">
    <MudForm Class="d-flex flex-row align-end pa-0 ma-0 gap-5 w-100">
        <MudTextField @bind-Value="bookFilter" Immediate="true" Label="Livro" Class="ma-0" />
        <MudDatePicker @bind-Date="loanDateFilter" ShowToolbar="false" Label="Data empréstimo" Class="ma-0" />
        <MudDatePicker @bind-Date="loanDateValidityFilter" ShowToolbar="false" Label="Data Validade" Class="ma-0" />
        <MudSelect @bind-Value="statusFilter" Label="Disponível" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="0">Todos</MudSelectItem>
            <MudSelectItem Value="1">Devolvidos</MudSelectItem>
            <MudSelectItem Value="2">Pendentes</MudSelectItem>
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterLoansDetailsAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (loansDetails == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="loansDetails" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LoanDetailsViewModel, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x=> x.BookName)" Class="w-100">Livro</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x=> x.LoanDate)">Data Empréstimo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x=> x.LoanValidity)">Validade</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x=> x.Returned)">Status</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Nome">@context.BookName</MudTd>
            <MudTd DataLabel="Data Empréstimo">@context.LoanDate.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Validade">@context.LoanValidity.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Status">@(context.Returned ? "Devolvido" : "Pendente")</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="OnPageChangedHandler" Count="@((int)Math.Ceiling((double)totalItems / size))" Selected="page" Class="pa-4" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<LoanDetailsViewModel> loansDetails = [];

    private LoanFilter filter = new();
    private string bookFilter;
    private DateTime? loanDateFilter;
    private DateTime? loanDateValidityFilter;
    private int statusFilter;

    private bool isFiltered = false;
    private int totalItems = 0;
    private int page = 1;
    private int size = 10;

    protected override async Task OnInitializedAsync()
    {
        await InitializeLoansDetailsAsync();
    }

    private async Task OnPageChangedHandler(int i)
    {
        page = i;

        if (!isFiltered) await InitializeLoansDetailsAsync();
        else await FilterLoansDetailsAsync();
    }

    private async Task InitializeLoansDetailsAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<LoanDetailsViewModel>>>($"/api/Loans/users/{Id}/details?page=1&size=10");

        if (result.IsSuccess)
            loansDetails = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task FilterLoansDetailsAsync()
    {
        filter.LoanValidity = loanDateValidityFilter ?? new DateTime();
        filter.LoanDate = loanDateFilter ?? new DateTime();
        filter.Status = (LoanStatus)statusFilter;

        GetLoansDetailsFilteredByUserQuery body = new(1, 10, Id, bookFilter, filter.LoanDate, filter.LoanValidity, filter.Status);

        var result = await httpService.PostAsync<GetLoansDetailsFilteredByUserQuery, CustomResponse<IEnumerable<LoanDetailsViewModel>>>($"/api/Loans/users/{Id}/details/filter", body);

        if (result.IsSuccess)
            loansDetails = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);

        StateHasChanged();
    }

    private async Task ResetFormFiltersAsync()
    {
        filter = new();
        bookFilter = null;
        loanDateFilter = null;
        loanDateValidityFilter = null;
        statusFilter = 0;

        await FilterLoansDetailsAsync();
        StateHasChanged();
    }
}
