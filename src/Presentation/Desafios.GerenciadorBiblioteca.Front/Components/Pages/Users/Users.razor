@page "/users"
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Users.Commands.RemoveUser
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Users.Queries.GetUserByName
@using Desafios.GerenciadorBiblioteca.Service.DTOs.ViewModels
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Common
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Users.Custom.Dialogs
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject HttpService httpService
@inject AlertService alertService

<PageTitle>Usuários</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Usuários</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0" MaxWidth="MaxWidth.False">
    <MudButton @onclick="RegisterDialogHandleAsync" Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success">Cadastrar</MudButton>

    <MudSpacer />

    <MudForm Class="d-flex flex-row align-end gap-5">
        <MudTextField @bind-Value="userNameFilter" Immediate="true" Label="Nome do Usuário" Class="ma-0" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterUsersHandleAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="users" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col width="280" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserViewModel, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Name)" Class="w-100">Nome</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Phone)">Telefone</MudTableSortLabel></MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Telefone">@context.Phone</MudTd>
            <MudTd DataLabel="Ações" Class="d-flex gap-2">
                <MudButton Href="@($"users/details/{context.Id}")" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search">Detalhes</MudButton>
                <MudButton @onclick="@((e) => DeleteDialogHandleAsync(context.Id))" Variant="Variant.Outlined" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error">Excluir</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="OnPageChangedHandler" Count="@((int)Math.Ceiling((double)totalItems / size))" Selected="page" Class="pa-4" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<UserViewModel> users;

    private string userNameFilter = string.Empty;

    private bool isFiltered = false;
    private int totalItems = 0;
    private int page = 1;
    private int size = 10;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeDataAsync();
            StateHasChanged();
        }
    }

    private async Task OnPageChangedHandler(int i)
    {
        page = i;

        if (!isFiltered) await InitializeDataAsync();
        else await FilterUsersHandleAsync();
    }

    private async Task InitializeDataAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<UserViewModel>>>($"/api/Users?page=1&size=10");

        if (result.IsSuccess)
            users = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task FilterUsersHandleAsync()
    {
        GetUsersByNameQuery body = new(1, 10, userNameFilter);
        var result = await httpService.PostAsync<GetUsersByNameQuery, CustomResponse<IEnumerable<UserViewModel>>>($"/api/Users/filter", body);

        if (result.IsSuccess)
            users = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);

        StateHasChanged();
    }

    private async Task DeleteDialogHandleAsync(int id)
    {
        var parameters = new DialogParameters<CommonDeleteDialog>
        {
            { x => x.ContentText, "Tem certeza que deseja Excluir esse Usuário e todos os seus registros? Essa ação não poderá ser desfeita." },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<CommonDeleteDialog>("Excluir", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            RemoveUserCommand body = new(id);

            var deleteResult = await httpService.DeleteAsync<RemoveUserCommand>($"/api/Users/{id}", body);

            if (!deleteResult.IsSuccess)
                alertService.ShowErrors(deleteResult.ErrorDetails, deleteResult.StatusCode);

            await InitializeDataAsync();
        }
    }

    private async Task RegisterDialogHandleAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<RegisterUserDialog>("Cadastrar", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await InitializeDataAsync();
        }
    }

    private async Task ResetFormFiltersAsync()
    {
        userNameFilter = string.Empty;
        await FilterUsersHandleAsync();
    }
}
