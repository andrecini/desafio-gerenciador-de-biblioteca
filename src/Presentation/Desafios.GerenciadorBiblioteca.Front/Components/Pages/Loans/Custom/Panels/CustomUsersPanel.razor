@using System.ComponentModel.DataAnnotations
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Users.Queries.GetUserByName
@using Desafios.GerenciadorBiblioteca.Service.DTOs.ViewModels
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Users.Custom.Panels
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject HttpService httpService;
@inject AlertService alertService

<PageTitle>Usuários</PageTitle>

<MudText Typo="Typo.h5" GutterBottom="true">Usuários Responsáveis</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0" MaxWidth="MaxWidth.False">
    <MudForm Class="d-flex flex-row align-end gap-5">
        <MudTextField @bind-Value="userNameFilter" Immediate="true" Label="Nome do Usuário" Class="ma-0" />
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterUsersHandleAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="users" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserViewModel, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Name)" Class="w-100">Nome</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=> x.Phone)">Telefone</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Nome">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Telefone">@context.Phone</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<UserViewModel> users;
    private Loan loan = new();
    private string userNameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InitializeDataAsync();
    }

    private async Task InitializeDataAsync()
    {
        await InitializeLoanAsync();
        await InitializeUsersAsync();
    }

    private async Task InitializeLoanAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<Loan>>($"/api/Loans/{Id}");

        if (result.IsSuccess)
            loan = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task InitializeUsersAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<UserViewModel>>>($"/api/Users");

        if (result.IsSuccess)
        {
            users = result.Content.Data;
            FilterUsersByLoanId();
        }
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task FilterUsersHandleAsync()
    {
        GetUsersByNameQuery body = new(1, 10, userNameFilter);
        var result = await httpService.PostAsync<GetUsersByNameQuery, CustomResponse<IEnumerable<UserViewModel>>>($"/api/Users/filter", body);

        if (result.IsSuccess)
        {
            users = result.Content.Data;
        }
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);

        FilterUsersByLoanId();
        StateHasChanged();
    }

    private void FilterUsersByLoanId()
    {
        users = users.Where(x => loan.UserId == x.Id);
    }

    private async Task ResetFormFiltersAsync()
    {
        userNameFilter = string.Empty;
        await FilterUsersHandleAsync();
    }
}