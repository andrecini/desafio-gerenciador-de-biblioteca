@page "/inventories"
@using Desafios.GerenciadorBiblioteca.Domain.Entities
@using Desafios.GerenciadorBiblioteca.Service.Services.Interfaces
@rendermode InteractiveServer
@inject IInventoryService inventoryService;
@inject ILibraryService libraryService;
@inject IBookService bookService;

<PageTitle>Inventários</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Inventários</MudText>
<MudText Class="mb-8">Listagem das Inventários.</MudText>

@if (inventories == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="inventoriesViewModel" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<InventoryViewModel, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InventoryViewModel, object>(x => x.LibraryName)">Biblioteca</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InventoryViewModel, object>(x=> x.BookName)">Livro</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InventoryViewModel, object>(x=> x.Available)">Dísponível</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Biblioteca">@context.LibraryName</MudTd>
            <MudTd DataLabel="Livro">@context.BookName</MudTd>
            <MudTd DataLabel="Dísponível">@context.Available</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<InventoryViewModel> inventoriesViewModel;
    private IEnumerable<Inventory> inventories;
    private IEnumerable<Library> libraries;
    private IEnumerable<Book> books;

    protected override async Task OnInitializedAsync()
    {
        inventories = await inventoryService.GetAllAsync();
        libraries = await libraryService.GetAllAsync();
        books = await bookService.GetAllAsync();

        SetViewModelList();
    }

    private void SetViewModelList()
    {
        List<InventoryViewModel> viewModelList = new();

        foreach (var i in inventories)
        {
            viewModelList.Add(new()
            {
                Id = i.Id,
                LibraryName = libraries.FirstOrDefault(x => x.Id == i.LibraryId).Name,
                BookName = books.FirstOrDefault(x => x.Id == i.BookId).Title,
                Available = i.Available ? "Disponível" : "Indisponível"
            });
        }

        inventoriesViewModel = viewModelList;
    }

    private class InventoryViewModel
    {
        public int Id { get; set; }
        public string LibraryName { get; set; }
        public string BookName { get; set; }
        public string Available { get; set; }
    }
}
