@page "/loans"
@using Desafios.GerenciadorBiblioteca.Domain.Entities
@using Desafios.GerenciadorBiblioteca.Service.Services.Interfaces
@rendermode InteractiveServer
@inject ILoanService loanService;
@inject IInventoryService inventoryService;
@inject IUserService userService;
@inject IBookService bookService;
@inject ILibraryService libraryService;

<PageTitle>Empréstimos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Empréstimos</MudText>
<MudText Class="mb-8">Listagem das Empréstimos.</MudText>

@if (inventories == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="loansViewModel" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LoanViewModel, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x => x.LibraryName)">Biblioteca</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.BookName)">Livro</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.LoanDate)">Data Empréstimo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.LoanValidit)">Válido até</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.ResponsibleUser)">Responsável</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.Returned)">Devolvolvido</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanViewModel, object>(x=> x.Status)">Status</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Biblioteca">@context.LibraryName</MudTd>
            <MudTd DataLabel="Livro">@context.BookName</MudTd>
            <MudTd DataLabel="Data Empréstimo">@context.LoanDate</MudTd>
            <MudTd DataLabel="Valido até">@context.LoanValidit</MudTd>
            <MudTd DataLabel="Responsável">@context.ResponsibleUser</MudTd>
            <MudTd DataLabel="Devolvido">@context.Returned</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<LoanViewModel> loansViewModel;
    private IEnumerable<Loan> loans;
    private IEnumerable<User> users;
    private IEnumerable<Inventory> inventories;
    private IEnumerable<Book> books;
    private IEnumerable<Library> libraries;

    protected override async Task OnInitializedAsync()
    {
        inventories = await inventoryService.GetAllAsync();
        loans = await loanService.GetAllAsync();
        users = await userService.GetAllAsync();
        books = await bookService.GetAllAsync();
        libraries = await libraryService.GetAllAsync();

        SetViewModelList();
    }

    private void SetViewModelList()
    {
        List<LoanViewModel> viewModelList = new();

        foreach (var l in loans)
        {
            var inventory = inventories.FirstOrDefault(x => x.Id == l.InventoryId);

            viewModelList.Add(new()
                {
                    Id = l.Id,
                    LibraryName = libraries.FirstOrDefault(x => x.Id == inventory.LibraryId).Name,
                    BookName = books.FirstOrDefault(x => x.Id == inventory.BookId).Title,
                    LoanDate = l.LoanDate,
                    LoanValidit = l.LoanValidity,
                    ResponsibleUser = users.FirstOrDefault(x => x.Id == l.UserId).Name ?? string.Empty,
                    Returned = l.Returned ? "Devolvido" : "Pendente",
                    Status = l.LoanValidity < DateTime.Now && !l.Returned ? "Em atraso" : "Dentro do prazo",
                });
        }

        loansViewModel = viewModelList;
    }

    private class LoanViewModel
    {
        public int Id { get; set; }
        public string LibraryName { get; set; }
        public string BookName { get; set; }
        public DateTime LoanDate { get; set; }
        public DateTime LoanValidit { get; set; }
        public string ResponsibleUser { get; set; }
        public string Returned { get; set; }
        public string Status { get; set; }
    }
}
