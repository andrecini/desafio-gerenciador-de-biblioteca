@using Desafios.GerenciadorBiblioteca.Domain.Enums
@using Desafios.GerenciadorBiblioteca.Domain.Models.Filters
@using Desafios.GerenciadorBiblioteca.Service.CQRS.Loans.Queries.GetLoansDetailsFiltered
@using Desafios.GerenciadorBiblioteca.Service.DTOs.Responses
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Common
@using Desafios.GerenciadorBiblioteca.Website.Components.Pages.Libraries.Custom.Dialogs
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject IDialogService dialogService
@inject HttpService httpService
@inject AlertService alertService

<MudText Typo="Typo.h6">Empréstimos</MudText>

<MudContainer Class="d-flex flex-row align-end pa-0 mb-5 ma-0 gap-5" MaxWidth="MaxWidth.False">
    <MudForm Class="d-flex flex-row align-end pa-0 ma-0 gap-5 w-100">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" IconColor="Color.Success" @onclick="RegisterDialogHandleAsync">Cadastrar</MudButton>
        <MudTextField @bind-Value="bookFilter" Immediate="true" Label="Livro" Class="ma-0" />
        <MudDatePicker @bind-Date="loanDateFilter" ShowToolbar="false" Label="Data empréstimo" Class="ma-0" />
        <MudDatePicker @bind-Date="loanDateValidityFilter" ShowToolbar="false" Label="Data Validade" Class="ma-0" />
        <MudTextField @bind-Value="userFilter" Immediate="true" Label="Responsável" Class="ma-0" />
        <MudSelect @bind-Value="statusFilter" Label="Disponível" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="0">Todos</MudSelectItem>
            <MudSelectItem Value="1">Devolvidos</MudSelectItem>
            <MudSelectItem Value="2">Pendentes</MudSelectItem>
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" @onclick="ResetFormFiltersAsync">Limpar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt" @onclick="FilterLoansDetailsAsync">Filtrar</MudButton>
    </MudForm>
</MudContainer>

@if (loansDetails == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="loansDetails" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true" Class="d-flex flex-column w-100">
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col width="280" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LoanDetailsViewModel, object>(x =>  x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x => x.BookName)" Class="w-100">Livro</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x => x.LoanDate)">Data Empréstimo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x => x.LoanValidity)">Validade</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x => x.Username)">Responsável</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<LoanDetailsViewModel, object>(x => x.Returned)">Status</MudTableSortLabel></MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id.ToString()</MudTd>
            <MudTd DataLabel="Livro">@context.BookName</MudTd>
            <MudTd DataLabel="Empréstimo">@context.LoanDate.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Validade">@context.LoanValidity.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Responsáve">@context.Username</MudTd>
            <MudTd DataLabel="Status">@(context.Returned ? "Devolvido" : "Pendente")</MudTd>
            <MudTd DataLabel="Ações" Class="d-flex gap-2">
                <MudButton Href="@($"/loans/details/{context.Id}")" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search">Detalhes</MudButton>
                <MudButton @onclick="@((e) => DeleteDialogHandleAsync(context.Id))" Variant="Variant.Outlined" Color="Color.Error" EndIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error">Excluir</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" />
        </PagerContent>
    </MudTable>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private IEnumerable<LoanDetailsViewModel> loansDetails = new List<LoanDetailsViewModel>();

    private LoanFilter filter = new();
    private string bookFilter;
    private string userFilter;
    private DateTime? loanDateFilter;
    private DateTime? loanDateValidityFilter;
    private int statusFilter;

    protected override async Task OnInitializedAsync()
    {
        await InitializeLoansDetailsAsync();
    }

    private async Task InitializeLoansDetailsAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<IEnumerable<LoanDetailsViewModel>>>($"/api/Loans/library/{Id}/details?page=1&size=10");

        if (result.IsSuccess)
            loansDetails = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
    }

    private async Task FilterLoansDetailsAsync()
    {
        filter.LoanValidity = loanDateValidityFilter ?? new DateTime();
        filter.LoanDate = loanDateFilter ?? new DateTime();
        filter.Status = (LoanStatus)statusFilter;

        GetLoansDetailsFilteredQuery body = new(1, 10, Id, bookFilter, userFilter, filter.LoanDate, filter.LoanValidity, filter.Status);

        var result = await httpService.PostAsync<GetLoansDetailsFilteredQuery, CustomResponse<IEnumerable<LoanDetailsViewModel>>>($"/api/Loans/library/{Id}/details/filter", body);

        if (result.IsSuccess)
            loansDetails = result.Content.Data;
        else
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);

        StateHasChanged();
    }

    private async Task ResetFormFiltersAsync()
    {
        filter = new();
        bookFilter = null;
        userFilter = null;
        loanDateFilter = null;
        loanDateValidityFilter = null;
        statusFilter = 0;

        await FilterLoansDetailsAsync();
    }

    private async Task DeleteDialogHandleAsync(int id)
    {
        var parameters = new DialogParameters<CommonDeleteDialog>
        {
            { x => x.ContentText, "Tem certeza que deseja Excluir esse Empréstimo e todos os seus registros? Essa ação não poderá ser desfeita." },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await dialogService.ShowAsync<CommonDeleteDialog>("Excluir", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var deleteResult = await httpService.DeleteAsync($"/api/Loans/{Id}");

            if (!deleteResult.IsSuccess)
                alertService.ShowErrors(deleteResult.ErrorDetails, deleteResult.StatusCode);

            await InitializeLoansDetailsAsync();
        }
    }

    private async Task RegisterDialogHandleAsync()
    {
        var parameters = new DialogParameters<RegisterLoanDialog>
        {
            { x => x.LibraryId, Id },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await dialogService.ShowAsync<RegisterLoanDialog>("Cadastrar", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await InitializeLoansDetailsAsync();
        }
    }
}
