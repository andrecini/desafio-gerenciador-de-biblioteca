@using Desafios.GerenciadorBiblioteca.Service.CQRS.Libraries.Commands.AddLibrary
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject ILibraryService service
@inject HttpService httpService
@inject AlertService alertService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Nome" Required="true" RequiredError="O Nome da Biblioteca é obrigatório" @bind-Value="library.Name" />

            <MudTextField T="string" Label="CNPJ" HelperText="Digite apenas Números"
                          Validation="@(new Func<string, string>(ValidateCNPJ))" Required="true"
                          RequiredError="O CNPJ é obrigatório" @bind-Value="library.CNPJ" />

            <MudTextField T="string" Label="Telefone" HelperText="Digite apenas Números"
                          InputType="InputType.Telephone"
                          Validation="@(new Func<string, string>(ValidatePhone))" Required="true"
                          RequiredError="O Telefone é obrigatório!" @bind-Value="library.Phone" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SubmitAsync">Cadastrar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private Library library = new Library();
    private MudForm form;
    private bool success;
    private string[] errors = [];

    private async Task SubmitAsync()
    {
        await form.Validate();

        if (form.IsValid)
        {
            AddLibraryCommand body = new(library.Name, library.CNPJ, library.Phone);
            var result = await httpService.PostAsync<AddLibraryCommand, CustomResponse<Library>>($"/api/Libraries", body);

            if (result.IsSuccess)
                MudDialog.Close(DialogResult.Ok(library));
            else
                alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private string ValidateCNPJ(string cnpj)
    {
        if (string.IsNullOrEmpty(cnpj))
            return "O CNPJ é obrigatório";

        if (!cnpj.All(char.IsDigit))
            return "O CNPJ deve conter apenas números";

        if (cnpj.Length != 14)
            return "O CNPJ deve ter 14 dígitos";

        return null;
    }

    private string ValidatePhone(string phone)
    {
        if (string.IsNullOrEmpty(phone))
            return "O Telefone é obrigatório";

        if (!phone.All(char.IsDigit))
            return "O Telefone deve conter apenas números";

        if (phone.Length != 11)
            return "O Telefone deve ter 11 dígitos";

        return null;
    }
}
