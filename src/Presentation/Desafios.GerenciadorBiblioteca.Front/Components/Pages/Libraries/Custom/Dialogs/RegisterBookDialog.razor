@using Desafios.GerenciadorBiblioteca.Service.CQRS.Inventories.Command.AddInventory
@using Desafios.GerenciadorBiblioteca.Website.Models.Responses
@using Desafios.GerenciadorBiblioteca.Website.Services
@inject HttpService httpService
@inject AlertService alertService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudSelect T="int" Label="Selecione um dos Livro Cadastrados" AnchorOrigin="Origin.BottomCenter"
                       HelperText="@helperText"
                       Validation="@(new Func<int, string>(ValidateBook))" Required="true"
                       RequiredError="O Livro é obrigatório" @bind-Value="bookId">
                <MudSelectItem Value="0">Selecione um livro</MudSelectItem>
                @foreach (var b in booksDictionary)
                {
                    <MudSelectItem Value="b.Key">@b.Value</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SubmitAsync">Cadastrar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int LibraryId { get; set; }

    private Dictionary<int, string> booksDictionary = new();
    private int bookId;
    private string helperText = string.Empty;

    private MudForm form;
    private bool success;
    private string[] errors = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeDataAsync();
            StateHasChanged();
        }
    }

    private async Task InitializeDataAsync()
    {
        await InitializeBooksDictAsync();
        helperText = "Se o livro não estiver listado, adicione-o à nossa base de dados na aba \"Livros\".";
    }

    private async Task InitializeBooksDictAsync()
    {
        var result = await httpService.GetAsync<CustomResponse<Dictionary<int, string>>>($"/api/Inventories/library/{LibraryId}/books/dict/distinct");

        if (result.IsSuccess)
            booksDictionary = result.Content.Data;
        else
        {                                                
            alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
            booksDictionary = [];
        }
    }

    private async Task SubmitAsync()
    {
        await form.Validate();

        if (form.IsValid)
        {
            AddInventoryCommand body = new(LibraryId, bookId);
            var result = await httpService.PostAsync<AddInventoryCommand, CustomResponse<Inventory>>($"/api/Inventories", body);

            if (result.IsSuccess) MudDialog.Close(DialogResult.Ok(true));
            else alertService.ShowErrors(result.ErrorDetails, result.StatusCode);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private string ValidateBook(int bookId)
    {
        return bookId <= 0 ? "O Livro é obrigatório" : null;
    }
}